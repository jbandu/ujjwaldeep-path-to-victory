name: Seed Epics & Stories from JSON
on:
  workflow_dispatch:
  push:
    paths:
      - "docs/product/stories.json"
      - ".github/workflows/seed-issues.yml"
jobs:
  seed:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      projects: write
    steps:
      - uses: actions/checkout@v4

      - name: Read stories.json and seed issues
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const core = require('@actions/core');

            const data = JSON.parse(fs.readFileSync('docs/product/stories.json', 'utf8'));
            const ownerRepo = process.env.GITHUB_REPOSITORY;
            const [owner, repo] = ownerRepo.split('/');

            // Helpers
            async function ensureLabels(labels) {
              for (const name of labels) {
                try {
                  await github.rest.issues.getLabel({owner, repo, name});
                } catch (e) {
                  await github.rest.issues.createLabel({owner, repo, name, color: 'cccccc'});
                }
              }
            }

            async function upsertIssueByTitle(title, body, labels) {
              const search = await github.rest.search.issuesAndPullRequests({
                q: `repo:${owner}/${repo} is:issue in:title "${title}"`
              });
              let number = search.data.items.find(i => i.title === title)?.number;
              if (!number) {
                const { data: issue } = await github.rest.issues.create({ owner, repo, title, body, labels });
                return issue.number;
              } else {
                await github.rest.issues.update({ owner, repo, issue_number: number, body, labels });
                return number;
              }
            }

            // Optional Projects (beta) support
            const projectNumber = process.env.PROJECT_NUMBER; // e.g. 1
            const org = process.env.PROJECT_ORG || owner;     // org or user
            async function addToProjectV2(issueNodeId) {
              if (!projectNumber) return;
              // Get project id
              const proj = await github.graphql(`
                query($org:String!, $num:Int!) {
                  organization(login:$org) {
                    projectV2(number:$num){ id }
                  }
                  user(login:$org){
                    projectV2(number:$num){ id }
                  }
                }
              `, { org, num: Number(projectNumber) });
              const projectId =
                proj?.organization?.projectV2?.id || proj?.user?.projectV2?.id;
              if (!projectId) return;

              await github.graphql(`
                mutation($projectId:ID!, $contentId:ID!){
                  addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) { item { id } }
                }
              `, { projectId, contentId: issueNodeId });
            }

            // Ensure core labels exist
            const baseLabels = [
              'type: epic','type: story','status: triage',
              'area: auth','area: subscription','area: dashboard','area: tests','area: print-omr','area: planner','area: admin'
            ];
            await ensureLabels(baseLabels);

            // 1) Epics
            const epicMap = {};
            for (const epic of data.epics) {
              const labels = epic.labels || ['type: epic','status: triage'];
              await ensureLabels(labels);
              const body = epic.body || '';
              const num = await upsertIssueByTitle(epic.title, body, labels);
              epicMap[epic.key] = num;
            }

            // 2) Stories
            for (const s of data.stories) {
              const epicNum = epicMap[s.epic];
              const labels = ['type: story', 'status: triage', `area: ${s.area}`];
              await ensureLabels(labels);

              const tmpl = data.defaults?.storyBodyTemplate || '';
              const body = (tmpl
                .replace('{{persona}}', s.persona)
                .replace('{{capability}}', s.capability)
                .replace('{{benefit}}', s.benefit)
              ) + `\n\n**Epic:** #${epicNum}`;

              const issueNumber = await upsertIssueByTitle(s.title, body, labels);

              // Optionally add to Project (beta)
              try {
                const { data: issue } = await github.rest.issues.get({ owner, repo, issue_number: issueNumber });
                await addToProjectV2(issue.node_id);
              } catch (e) {
                core.warning(`Project add failed for #${issueNumber}: ${e.message}`);
              }
            }

            core.info('Seeding complete.');
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_NUMBER: ${{ vars.PROJECT_NUMBER }}
          PROJECT_ORG: ${{ vars.PROJECT_ORG }}
